// Convolution function with vectorization
template <class real>
real convolve(const jbutil::image<int>& image, real m, real n, int a, real R, const jbutil::vector<real>& lanczos_values) {
    int m_start = max(0, static_cast<int>(ceil(m / R - a)));
    int m_end = min(image.get_cols() - 1, static_cast<int>(floor(m / R + a)));
    int n_start = max(0, static_cast<int>(ceil(n / R - a)));
    int n_end = min(image.get_rows() - 1, static_cast<int>(floor(n / R + a)));

    real sum = 0.0;
    real weight = 0.0;

    for (int i = m_start; i <= m_end; ++i) {
        int 
        for (; j <= n_end - 3; j += 4) { 
            v4sf m_vec = { (m / R) - i, (m / R) - i, (m / R) - i, (m / R) - i };
            v4sf n_vec = { (n / R) - j, (n / R) - (j + 1), (n / R) - (j + 2), (n / R) - (j + 3) };

            v4sf lanczos_m = { lanczos(lanczos_values, abs(m_vec[0]), a, R),
                               lanczos(lanczos_values, abs(m_vec[1]), a, R),
                               lanczos(lanczos_values, abs(m_vec[2]), a, R),
                               lanczos(lanczos_values, abs(m_vec[3]), a, R) };

            v4sf lanczos_n = { lanczos(lanczos_values, abs(n_vec[0]), a, R),
                               lanczos(lanczos_values, abs(n_vec[1]), a, R),
                               lanczos(lanczos_values, abs(n_vec[2]), a, R),
                               lanczos(lanczos_values, abs(n_vec[3]), a, R) };

            v4sf weight_vec = __builtin_ia32_mulps(lanczos_m, lanczos_n);

            v4sf image_vec = { static_cast<real>(image(0, j, i)),
                               static_cast<real>(image(0, j + 1, i)),
                               static_cast<real>(image(0, j + 2, i)),
                               static_cast<real>(image(0, j + 3, i)) };
       v4sf sum_vec = __builtin_ia32_mulps(image_vec, weight_vec);

            sum += sum_vec[0] + sum_vec[1] + sum_vec[2] + sum_vec[3];
            weight += weight_vec[0] + weight_vec[1] + weight_vec[2] + weight_vec[3];
        }

        // Handle remaining iterations
        for (; j <= n_end; ++j) {
            real w = lanczos(lanczos_values, abs((m / R) - i), a, R) * lanczos(lanczos_values, abs((n / R) - j), a, R);
            sum += image(0, j, i) * w;
            weight += w;
        }
    }

    return sum / weight;
}