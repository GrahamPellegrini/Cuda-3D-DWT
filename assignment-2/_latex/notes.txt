Note the use of size_t instead of int for efficient memory allocation and indexing which is more prominent in the GPU porting.

We didnt make use of Concurrent Execution or streams since in the case of the 3D DWT the dependancy that lies on the volume to be all loaded at once and the sequence of the kernels makes using streams obsolotete. 

The entire 3D volume must reside in memory for the operation. During each pass, you access and transform a significant part (or all) of the volume.
The 3D DWT involves three sequential passes: one for rows, one for columns, and one for depth. Each pass depends on the output of the previous pass.You cannot start the column operation until the row operation is fully complete.

Talk about the choice of flattenting the volume and the row-major access

heirachal memory of cuda in our case is the constant coeffs and the global volume
the explination of hwo the coeffs where initally used as shared memeory but then moved constant since they do not change and it was more efficient show two runs of each and imporved result.

during write up and testing speed up show nvcc --version
To do:

Use code Profiling on PCS at Uni cuda-gdb and NVIDIA Visual Profiler (for CUDA applications)

annotate and show the prfiling tools results
if possible compare with a previouse slower version



Check for any on the vectors inside a loop created for temportstny storage and instead define with the on the fly vectrors suggested in the previous report.
Add the not of this check in the 1a.



Refercnes:
1. https://siboehm.com/articles/22/CUDA-MMM


Since we are porting the serial implementation, most of the code structure is kept consistent with the serial implementation. We no longer have need for the levels argument to be passed since we are moving to a single level implementation but instead we need to pass a flag that indicated when we want to perform the inverse transform. So in our code the 'multi-level' function is no longer present and instead main call the 'dwt 3d' function or performes the inverse with the 'idwt.h' header file. The arguments passed now do not include the levels argument but instead include the flag for the inverse transform.\\



\textbf{Shared Memory:}

\begin{figure}
    \centering
    \includegraphics[width=0.5\textwidth]{assets/shared-time.png}
    \caption{Shared Memory Timing from event record}
    \label{fig:6}
\end{figure}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.5\textwidth]{assets/shared-sum.png}
    \caption{Shared Memory Timing from profiler}
    \label{fig:7}
\end{figure}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.5\textwidth]{assets/shared-mem.png}
    \caption{Shared Summary Timing from profiler}
    \label{fig:8}
\end{figure}


\textbf{Constant Memory:}

\begin{figure}
    \centering
    \includegraphics[width=0.5\textwidth]{assets/constant-time.png}
    \caption{Constant Memory Timing from event record}
    \label{fig:9}
\end{figure}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.5\textwidth]{assets/const-sum.png}
    \caption{Constant Memory Timing from profiler}
    \label{fig:10}
\end{figure}

\begin{figure}[h]
    \centering
    \includegraphics[width=0.5\textwidth]{assets/const-mem.png}
    \caption{Constant Summary Timing from profiler}
    \label{fig:11}
\end{figure}